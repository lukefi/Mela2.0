# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI - Unit and Robot Tests

# wokflow is triggered on following
on:
  # trigger on push to main
  push:
    branches: [ main  , MELA2-81 ]
  # trigger on new PR to main
  pull_request:
    branches: [ main]
  # enables manual triggering
  workflow_dispatch:

permissions:
  contents: read
  packages: read

jobs:
  run-tests: 
    name: Run Unit and Robot Tests
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13.5"]
        r-version: ["4.5.0"]
        
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up R ${{ matrix.r-version }}
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.r-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[tests]

    - name: Run pylint
      run: |
        pylint lukefi --output-format=github

    - name: Run pylint, TODO warnings only
      continue-on-error: true
      run: |
        pylint lukefi --output-format=github --disable=all --enable=fixme --fail-under=0
    
    - name: Run mypy
      run: |
        sudo apt-get install -y jq
        mypy -p lukefi --output=json | jq -r '"::\(.severity) title=Mypy issue,file=\(.file),line=\(.line),col=\(.column)::\(.message)"'

    - name: Install R dependencies
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        cache-version: 2

    - name: Compile shared libraries
      run: |
        make -C lukefi/metsi/forestry/c

    - name: Test with pytest
      run: |
        python -m pytest --junit-xml=pytest.xml --cov=lukefi --cov-report xml --cov-branch

    - name: Ensure no stale GHCR creds
      run: |
        docker logout ghcr.io || true

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Pull growth-libs image
      run: |
        docker pull ghcr.io/lukefi/mela2.0/growth-libs:linux-x64-test

    - name: Extract Motti binaries from image
      env:
        IMAGE: ghcr.io/lukefi/mela2.0/growth-libs:linux-x64-test
        DEST: ${{ github.workspace }}/data/motti
      run: |
        set -euo pipefail
        mkdir -p "$DEST"
        # Stream only root-level files (not directories) from the image to DEST
        docker run --rm "$IMAGE" sh -lc '
          set -e
          cd /
          # list non-directories at root; empty is ok
          files="$(ls -p | grep -v / || true)"
          if [ -n "$files" ]; then
            tar -cf - $files
          else
            # no regular files at root; create empty tar
            tar -cf - --files-from /dev/null
          fi
        ' | tar -C "$DEST" -xf -
        # Make likely executables runnable (ignore if none)
        chmod +x "$DEST"/* 2>/dev/null || true
        # Sanity check + short listing
        echo "Copied to $DEST:"
        ls -al "$DEST"

    - name: Run Robot Tests
      run: |
        export PYTHONPATH=${GITHUB_WORKSPACE}
        robot --xunit robottest.xml tests/robot

    - name: Upload testing results
      if: (!cancelled())
      uses: actions/upload-artifact@v4
      with:
        name: Test Results (Python ${{ matrix.python-version }}, R ${{ matrix.r-version}})
        path: |
          coverage.xml
          pytest.xml
          log.html
          report.html
          output.xml
          robottest.xml
          tests/robot/**/output/

    - name: Clean up
      run: |
        make -C lukefi/metsi/forestry/c clean
        rm -rf ./data/motti || true

  
  publish-test-results:
    name: "Publish Test Results"
    needs: run-tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read
    if: (!cancelled())

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            artifacts/**/pytest.xml
            artifacts/**/robottest.xml

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: artifacts/**/coverage.xml
          format: markdown
          output: both
          badge: true
          fail_below_min: true
          hide_complexity: true
          hide_branch_rate: false
          indicators: true
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          path: code-coverage-results.md
